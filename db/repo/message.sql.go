// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (name, phoneno, email)
VALUES ($1, $2, $3)
RETURNING id, name, phoneno, email, created_at
`

type CreateCustomerParams struct {
	Name    string `json:"name"`
	Phoneno string `json:"phoneno"`
	Email   string `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, arg.Name, arg.Phoneno, arg.Email)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phoneno,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (customer_id, product_id, price, quantity)
VALUES ($1, $2, (SELECT price FROM product WHERE id = CAST($2 AS VARCHAR)), $3)
RETURNING id, customer_id, product_id, price, quantity, total_price, order_status, order_date
`

type CreateOrderParams struct {
	//CustomerID string         `json:"customer_id"`
	ProductID  string         `json:"product_id"`
	//Price      pgtype.Numeric `json:"price"`
	Quantity   int32          `json:"quantity"`
	//TotalPrice string `json:"total_price"`
}

func (q *Queries) CreateOrder(ctx context.Context, id string, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, id,
		//arg.CustomerID,
		arg.ProductID,
		//arg.Price,
		arg.Quantity,
		//arg.TotalPrice,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.TotalPrice,
		&i.OrderStatus,
		&i.OrderDate,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO "order_item" (order_id, product_id, quantity, price)
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, product_id, quantity, price, created_at
`

type CreateOrderItemParams struct {
	OrderID   string         `json:"order_id"`
	ProductID string         `json:"product_id"`
	Quantity  int32          `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (name, price, stock)
VALUES ($1, $2, $3)
RETURNING id, name, price, stock, created_at
`

type CreateProductParams struct {
	Name  string         `json:"name"`
	Price pgtype.Numeric `json:"price"`
	Stock int32          `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Price, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerById = `-- name: GetCustomerById :one
SELECT id, name, phoneno, email, created_at FROM customer 
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCustomerById(ctx context.Context, id string) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getCustomerById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phoneno,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByPhoneNo = `-- name: GetCustomerByPhoneNo :many
SELECT phoneno FROM customer 
WHERE phoneno = $1
`

func (q *Queries) GetCustomerByPhoneNo(ctx context.Context, phoneno string) ([]string, error) {
	rows, err := q.db.Query(ctx, getCustomerByPhoneNo, phoneno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var phoneno string
		if err := rows.Scan(&phoneno); err != nil {
			return nil, err
		}
		items = append(items, phoneno)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id FROM "order" 
WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getOrderById, id)
	err := row.Scan(&id)
	return id, err
}

const getOrderItemById = `-- name: GetOrderItemById :one
SELECT id FROM "order_item" 
WHERE id = $1
`

func (q *Queries) GetOrderItemById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getOrderItemById, id)
	err := row.Scan(&id)
	return id, err
}

const getProductById = `-- name: GetProductById :one
SELECT id FROM product 
WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	err := row.Scan(&id)
	return id, err
}

const updateOrderById = `-- name: UpdateOrderById :one
UPDATE "order" 
SET 
order_status = $2
WHERE id = $1
RETURNING id, customer_id, product_id, price, quantity, total_price, order_status, order_date
`

type UpdateOrderByIdParams struct {
	ID          string  `json:"id"`
	OrderStatus *string `json:"order_status"`
}

func (q *Queries) UpdateOrderById(ctx context.Context, arg UpdateOrderByIdParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderById, arg.ID, arg.OrderStatus)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.TotalPrice,
		&i.OrderStatus,
		&i.OrderDate,
	)
	return i, err
}

const updateOrderTotalPriceById = `-- name: UpdateOrderTotalPriceById :one
UPDATE "order" 
SET total_price =  (p.price * "order".quantity)
    FROM product p
    WHERE  p.id = "order".product_id 

	AND "order".id = $1
RETURNING "order".id, "order".customer_id, "order".product_id, "order".price, "order".quantity, "order".total_price, "order".order_status, "order".order_date
`

func (q *Queries) UpdateOrderTotalPriceById(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderTotalPriceById,  id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Price,
		&i.Quantity,
		&i.TotalPrice,
		&i.OrderStatus,
		&i.OrderDate,
	)
	return i, err
}


const UpdateProductStockById = `-- name: UpdateOrderById :exec
UPDATE "product" p
SET stock = (p.stock - o.quantity)
FROM "order" o
WHERE p.id = o.product_id
  AND o.id = $1

RETURNING p.id, p.name, p.price, p.stock, p.created_at
`
type UpdateProductStockByIdParam struct{
	ID          string  `json:"id"`
}
func (q *Queries)  UpdateProductStockById(ctx context.Context, arg UpdateProductStockByIdParam) error {
	_, err := q.db.Exec(ctx, UpdateProductStockById, arg.ID)
	if err !=nil {
		return  err
	}
	return nil
}